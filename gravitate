#!/usr/bin/env node

var request = require('request'),
    path = require('path'),
    AdmZip = require('adm-zip'),
    mv = require('mv'),
    slug = require('slug'),
    factory = require('factory'),
    loading = require('loading-indicator'),
    presets = require('loading-indicator/presets'),
    chalk = require('chalk'),
    inquirer = require('inquirer'),
    shelljs = require('shelljs/global'),
    fs = require('fs-extra');

var data = {
  repo: 'https://github.com/Polarbitco/gravitate-grav/archive/master.zip',
  temp: './temp.zip',
  loadingPreset: presets.dots
}

var input = {};

var error = chalk.bold.red;
var finish = chalk.bold.green;
var extractPath = process.cwd() + '/';
bootstrap();

function bootstrap() {
  var args = process.argv.slice(2);

  switch (args[0]) {
    case 'new':
      inquire();
    break;
    case 'help':
      help();
    break;
    default:
      help();
   }
}

function inquire() {
  var questions = [
    {
      type: 'input',
      name: 'siteName',
      message: 'What\'s the name of your project?',
      validate: function (value) {
        if (value) {
          return true;
        }
        return 'Please enter a name';
      }
    },
    {
      type: 'input',
      name: 'siteDescription',
      message: 'Description',
      validate: function (value) {
        if (value) {
          return true;
        }
        return 'Please enter a description';
      }
    },
    {
      type: 'input',
      name: 'siteKeywords',
      message: 'Keywords (separated by comma)',
      validate: function (value) {
        if (value) {
          return true;
        }
        return 'Please enter some keywords';
      }
    },
    {
      type: 'input',
      name: 'siteAuthor',
      message: 'Author',
      validate: function (value) {
        if (value) {
          return true;
        }
        return 'Please enter an author';
      }
    },
    {
      type: 'input',
      name: 'siteClientName',
      message: 'Client name (optional)'
    },
    {
      type: 'input',
      name: 'siteEmail',
      message: 'Email',
      validate: function (value) {
        if (value) {
          return true;
        }
        return 'Please enter an email address';
      }
    },
    {
      type: 'input',
      name: 'siteUrl',
      message: 'URL (e.g. http://www.example.com)',
      validate: function (value) {
        if (value) {
          return true;
        }
        return 'Please enter a URL';
      }
    },
    {
      type: 'input',
      name: 'siteGoogleAnalytics',
      message: 'Google Analytics ID (e.g. UA-78698997-8, optional)'
    }
  ];

  inquirer.prompt(questions).then(function (answers) {
    input = answers;
    input.siteSlug = slug(input.siteName).toLowerCase();
    if (!input.siteClientName) {
      input.siteClientName = input.siteAuthor;
    }
    download();
  });
}

function help() {
  console.log('Commands:');
  console.log('   gravitate [new]........Generates a new Grav site.');
  console.log('   gravitate [help].......Provides help.');
}

function download() {
  var loadingTimer = loading.start('Downloading Grav...', {
    frames: data.loadingPreset
  });
  request(data.repo)
    .pipe(fs.createWriteStream(data.temp))
    .on('close', function () {
      loading.stop(loadingTimer);
      extract();
    });
}

function extract() {
  loadingTimer = loading.start('Extracting repository...', {
    frames: data.loadingPreset
  });
  var zip = new AdmZip(data.temp);
  zip.extractAllTo(extractPath + 'temp', true);
  fs.unlinkSync(data.temp);
  moveDir();
}

function moveDir() {
  fs.readdir(extractPath + 'temp', (err, files) => {
    copyDir(files[0]);
  })
}

function copyDir(file) {
  var dirPath = extractPath + 'temp/' + file;
  mv(dirPath, extractPath + input.slug + '_temp', {mkdirp: true}, function(err) {
    overwrite();
    fs.removeSync(extractPath + 'temp/');
  });
}

function overwrite() {
  loading.stop(loadingTimer);

  loadingTimer = loading.start('Building template...', {
    frames: data.loadingPreset
  });

  var templateFactory = factory({
    template: extractPath + input.slug + '_temp',
  });

  var options = {
    destination: extractPath + input.slug,
    overwrite: true,
  };

  templateFactory(options, input)
    .then(function(results) {
      fs.removeSync(extractPath + input.slug + '_temp');
      loading.stop(loadingTimer);
      loadingTimer = loading.start('Installing packages...', {
        frames: data.loadingPreset
      });
      process.chdir(extractPath + input.name);
      npmInstall();
    }).catch(function(error) {
      loading.stop(loadingTimer);
      console.log(error('Template creation failed: ' + error));
    });
}

function npmInstall() {
  exec('npm install', {silent: true}, function(code) {
    if (!code) {
      bowerInstall();
    }
  });
}

function bowerInstall() {
  exec('bower install', {silent: true}, function(code) {
    if (!code) {
      chmodGrav();
    }
  });
}

function chmodGrav() {
  exec('chmod +x bin/grav', {silent: true}, function(code) {
    if (!code) {
      chmodGpm();
    }
  });
}

function chmodGpm() {
  exec('chmod +x bin/gpm', {silent: true}, function(code) {
    if (!code) {
      gravInstall();
    }
  });
}

function gravInstall() {
  exec('bin/grav install', {silent: true}, function(code) {
    if (!code) {
      loading.stop(loadingTimer);
      console.log(finish('Generating Grav site completed âœ“'));
      console.log(finish('See '+chalk.underline('./' + input.slug + '/README.md')+' for more information'));
    }
  });
}

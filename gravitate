#!/usr/bin/env node

var request = require('request'),
    path = require('path'),
    AdmZip = require('adm-zip'),
    mv = require('mv'),
    slug = require('slug'),
    factory = require('factory'),
    loading = require('loading-indicator'),
    presets = require('loading-indicator/presets'),
    chalk = require('chalk'),
    fs = require('fs-extra');

var data = {
  name: 'Sample project',
  slug: 'sample-project',
  repo: 'https://github.com/Polarbitco/gravitate-grav/archive/master.zip',
  temp: './temp.zip',
  loadingPreset: presets.dots
}

var error = chalk.bold.red;
var finish = chalk.bold.green;

var extractPath =  path.join(path.dirname(fs.realpathSync(__filename)), './');
bootstrap();

function bootstrap() {
  var args = process.argv.slice(2);

  switch (args[0]) {
    case 'new':
      inquire();
    break;
    case 'help':
      help();
    break;
    default:
      help();
   }
}

function inquire() {
  //data.name = args[1];
  //data.slug = slug(data.name);
  download();
}

function help() {
  console.log('Commands:');
  console.log('   gravitate [new]........Generates a new Grav site.');
  console.log('   gravitate [help].......Provides help.');
}

function download() {
  var loadingTimer = loading.start('Downloading Grav...', {
    frames: data.loadingPreset
  });
  request(data.repo)
    .pipe(fs.createWriteStream(data.temp))
    .on('close', function () {
      loading.stop(loadingTimer);
      extract();
    });
}

function extract() {
  loadingTimer = loading.start('Extracting repository...', {
    frames: data.loadingPreset
  });
  var zip = new AdmZip(data.temp);
  zip.extractAllTo(extractPath + 'temp', true);
  fs.unlinkSync(data.temp);
  moveDir();
}

function moveDir() {
  fs.readdir(extractPath + 'temp', (err, files) => {
    copyDir(files[0]);
  })
}

function copyDir(file) {
  var dirPath = extractPath + 'temp/' + file;
  mv(dirPath, extractPath + data.slug + '_temp', {mkdirp: true}, function(err) {
    overwrite();
    fs.removeSync(extractPath + 'temp/');
  });
}

function overwrite() {
  loading.stop(loadingTimer);

  loadingTimer = loading.start('Building template...', {
    frames: data.loadingPreset
  });

  var templateFactory = factory({
    template: extractPath + data.slug + '_temp',
  });

  var options = {
    destination: extractPath + data.slug,
    overwrite: true,
  };
  var context = {
    siteName: data.name,
    siteSlug: data.slug
  };

  templateFactory(options, context)
    .then(function(results) {
      fs.removeSync(extractPath + data.slug + '_temp');
      loading.stop(loadingTimer);
      console.log(finish('Generating Grav site completed âœ“'));
      console.log(finish('See '+chalk.underline('./' + data.slug + '/README.md')+' for more information'));
    }).catch(function(error) {
      loading.stop(loadingTimer);
      console.log(error('Template creation failed: ' + error));
    });

  // write readme
  // ask for more data during `new` command: description, author etc.
  // run bin/grav install, create admin account?, npm install bower install
  // test out with mamp
  // add sample site
}
